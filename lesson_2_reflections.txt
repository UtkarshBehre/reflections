Q1. What happens when you initialize a repository? Why do you need to do it?
A. It makes the directory a git repository containing all the meta data inside a .git folder
which is supposed to record all the changes we make in the repository in the future.
We need to do this so that it can track all the changes and save all commits whenever we 
think we made good amount of changes in our code.

Q2, How is the staging area different from the working directory and the repository? What 
value do you think it offers?
A. Staging area is the middle ground b/w the working directory and the git repository. It
offers u to have a customizable holder for our changes as we would like to tweeg with and 
helps out in maintaining order before making any changes to the repository itself.

Q3. How can you use the staging area to make sure you have one commit per logical change?
A. We can check the diff b/w staging area and repo using git --staged and it'll show us
what are we going to commit exactly so we can double check before commiting. There maybe
other changes there in our working directory but that will be ignored during this process.

Q4. What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?
A. Some situations in where branches would be helpful can be 
1. experiments
2. suggestion
3. proposal
4. working simultaneously
5. have an active branch different from main.
6. compartmentalize.
7. can easily jump b/w branches to continue other sections of work anytime.

Branches will help out in keeping  the main branch with high production quality keeping 
everything clean for public to see.

Q5. How do the diagrams help you visualize the branch structure?
A. It helps out in visualizing how the branch structure exists, specially when there is
is a complex branch structure most important is to know which branch is whose parent and so
it helps out in a clean demonstration for the structure.

Q6. What is the result of merging two branches together? Why do we represent it in the 
diagram the way we do?
A. It combines the codes of both branches into one branch using the default method.
We can use "git merge master coins", while being in the master branch, to merge coins branch
into the master branch.
Once a branch is merged we can then delete the branch as it is just a label at 
this point. We can use "git branch -d coins" for this. 
We represent it in the way we do because we are able to merge any 2 parallel going branches
together at any point we's like to.

Q7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
A. pros would be it always makes it easier by highlighting the conflict in the file itself
everytime it detects the conflict and if there is no conflict then it does everything itself
pretty much. On the other hand if there is a conflict it always forces us to resolve it 
manualy, this can be tedious and increase reliability or might take a while since sometimes 
2 different people will have to fix a schedule to discuss the changes to be made in the final
commit.